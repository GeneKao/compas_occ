from typing import Tuple
from compas.geometry import Point
from compas.geometry import Vector
from compas.geometry import Frame
from compas.geometry import Curve
from compas.geometry import Box
from compas.geometry import Transformation

from OCC.Core.Geom import Geom_Curve
from OCC.Core.TopoDS import TopoDS_Shape
from OCC.Core.TopoDS import TopoDS_Edge


class OCCCurve(Curve):

    def __init__(self, name=None) -> None: ...

    @property
    def occ_curve(self) -> Geom_Curve: ...

    @occ_curve.setter
    def occ_curve(self, curve: Geom_Curve): ...

    @property
    def occ_shape(self) -> TopoDS_Shape: ...

    @property
    def occ_edge(self) -> TopoDS_Edge: ...

    def __eq__(self, other: 'OCCCurve') -> bool: ...

    @classmethod
    def from_occ(cls, occ_curve: Geom_Curve) -> 'OCCCurve': ...

    @classmethod
    def from_edge(cls, edge: TopoDS_Edge) -> 'OCCCurve': ...

    @property
    def dimension(self) -> int: ...

    @property
    def continuity(self) -> int: ...

    @property
    def degree(self) -> int: ...

    @property
    def domain(self) -> Tuple[float, float]: ...

    @property
    def order(self) -> int: ...

    @property
    def start(self) -> Point: ...

    @property
    def end(self) -> Point: ...

    @property
    def is_closed(self) -> bool: ...

    @property
    def is_periodic(self) -> bool: ...

    def transform(self, T: Transformation) -> None: ...

    def reverse(self) -> None: ...

    def point_at(self, t: float) -> Point: ...

    def tangent_at(self, t: float) -> Vector: ...

    def curvature_at(self, t: float) -> Vector: ...

    def frame_at(self, t: float) -> Frame: ...

    def aabb(self, precision: float = 0.0) -> Box: ...

    def length(self, precision: float = 1e-3) -> float: ...
